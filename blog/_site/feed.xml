<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/blog/_site/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/_site/" rel="alternate" type="text/html" /><updated>2017-12-06T00:09:04+09:00</updated><id>http://localhost:4000/blog/_site/</id><title type="html">Candy Water’s Blog</title><subtitle>Welcome to Candy Water's world!!</subtitle><entry><title type="html">LOVER</title><link href="http://localhost:4000/blog/_site/essay_blog/essay/2017/12/04/essay-lover.html" rel="alternate" type="text/html" title="LOVER" /><published>2017-12-04T00:00:00+09:00</published><updated>2017-12-04T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/essay_blog/essay/2017/12/04/essay-lover</id><content type="html" xml:base="http://localhost:4000/blog/_site/essay_blog/essay/2017/12/04/essay-lover.html">&lt;p&gt;比起梦一般的Natsu&lt;/p&gt;

&lt;p&gt;现在很多时候更多会想起Koto&lt;/p&gt;

&lt;p&gt;想起那次在车站偶然相遇时 她的那张疲惫  满面油光的  显着老态的脸&lt;/p&gt;

&lt;p&gt;心底里猛地揪起来一句话&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;与你年轻时的面貌相比,我更爱你现在备受摧残的容颜
杜拉斯&lt;情人&gt;&lt;/情人&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;车站时的Koto可爱不再&lt;/p&gt;

&lt;p&gt;我却没有一丝的厌倦&lt;/p&gt;

&lt;p&gt;我还是喜欢着的&lt;/p&gt;

&lt;p&gt;从那张就可以回想起高中刚开学的脸&lt;/p&gt;

&lt;p&gt;高中刚开学那天的第一次见面&lt;/p&gt;

&lt;p&gt;就好像天使一般的笑容&lt;/p&gt;

&lt;p&gt;就从那张脸上咧开&lt;/p&gt;

&lt;p&gt;就从这张似是老去的脸上浮出来，&lt;/p&gt;

&lt;p&gt;依稀她高中的模样&lt;/p&gt;</content><author><name></name></author><category term="essay" /><category term="access," /><category term="sql" /><summary type="html">比起梦一般的Natsu 现在很多时候更多会想起Koto 想起那次在车站偶然相遇时 她的那张疲惫 满面油光的 显着老态的脸 心底里猛地揪起来一句话 与你年轻时的面貌相比,我更爱你现在备受摧残的容颜 杜拉斯 车站时的Koto可爱不再 我却没有一丝的厌倦 我还是喜欢着的 从那张就可以回想起高中刚开学的脸 高中刚开学那天的第一次见面 就好像天使一般的笑容 就从那张脸上咧开 就从这张似是老去的脸上浮出来， 依稀她高中的模样</summary></entry><entry><title type="html">今日头痛</title><link href="http://localhost:4000/blog/_site/essay_blog/essay/2017/12/03/essay-headache.html" rel="alternate" type="text/html" title="今日头痛" /><published>2017-12-03T00:00:00+09:00</published><updated>2017-12-03T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/essay_blog/essay/2017/12/03/essay-headache</id><content type="html" xml:base="http://localhost:4000/blog/_site/essay_blog/essay/2017/12/03/essay-headache.html">&lt;p&gt;今日头疼。&lt;/p&gt;

&lt;p&gt;把电脑的cpu换成8700k。
再一次感受到了电子数据的脆弱。&lt;/p&gt;

&lt;p&gt;c盘的数据被彻底抹除——原本是可以复原的，但是win10自动更新后自动重启的设定让我措手不及。
win10自动更新新版本，重启，上一个版本的被保存到windows.old文件夹里。
原本的在windows.old里的资料全部被抹除掉重写。&lt;/p&gt;

&lt;p&gt;所有数据全部消失。&lt;/p&gt;

&lt;p&gt;那就，换回纸制品吧。&lt;/p&gt;

&lt;p&gt;但是纸质数据的碎片化——真的会找不到想找的东西。我不会魔法。没办法把这一切弄得很好很好。&lt;/p&gt;

&lt;p&gt;头痛。一天的整头痛。&lt;/p&gt;

&lt;p&gt;似乎是睡眠时房间温度太低。脑袋吃不消，就开始作痛。&lt;/p&gt;

&lt;p&gt;等到晚上11点左右，终于把电脑各种设定都设置好。调教周全。&lt;/p&gt;

&lt;p&gt;开始听歌。听音乐。真的恢复了好多。身体就像略有康复一般。&lt;/p&gt;

&lt;p&gt;有音乐真好。&lt;/p&gt;

&lt;p&gt;虽然视力仍然只能看清2米远。不过算了。&lt;/p&gt;

&lt;p&gt;能活着就真的很幸运了。&lt;/p&gt;</content><author><name></name></author><category term="essay" /><category term="access," /><category term="sql" /><summary type="html">今日头疼。 把电脑的cpu换成8700k。 再一次感受到了电子数据的脆弱。 c盘的数据被彻底抹除——原本是可以复原的，但是win10自动更新后自动重启的设定让我措手不及。 win10自动更新新版本，重启，上一个版本的被保存到windows.old文件夹里。 原本的在windows.old里的资料全部被抹除掉重写。 所有数据全部消失。 那就，换回纸制品吧。 但是纸质数据的碎片化——真的会找不到想找的东西。我不会魔法。没办法把这一切弄得很好很好。 头痛。一天的整头痛。 似乎是睡眠时房间温度太低。脑袋吃不消，就开始作痛。 等到晚上11点左右，终于把电脑各种设定都设置好。调教周全。 开始听歌。听音乐。真的恢复了好多。身体就像略有康复一般。 有音乐真好。 虽然视力仍然只能看清2米远。不过算了。 能活着就真的很幸运了。</summary></entry><entry><title type="html">近期短记</title><link href="http://localhost:4000/blog/_site/essay_blog/essay/2017/11/22/essay-recent-record.html" rel="alternate" type="text/html" title="近期短记" /><published>2017-11-22T00:00:00+09:00</published><updated>2017-11-22T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/essay_blog/essay/2017/11/22/essay-recent-record</id><content type="html" xml:base="http://localhost:4000/blog/_site/essay_blog/essay/2017/11/22/essay-recent-record.html">&lt;p&gt;哇。写到一半。在notepad++上写到一半然后电脑就崩溃了。吓得我和我的小伙伴们都惊呆了。
竟然连备份都没有。
没办法，这个五年多的电脑变得越来越不安定。
可能是我之前安装cpu风扇的时候，那个散热的胶让我不小心涂在了边缘。
可能是我之前拆cpu的时候，不小心撞坏了顶针。
总之我也不知道是什么样的鬼原因吧。我是想换一台电脑了–起码换个cpu。
但是鉴于同等配置的笔记本的高昂价格。我决定依旧台式。&lt;/p&gt;

&lt;p&gt;今天7点就下班了。竟然只加班了半个小时。我也觉得挺不可思议的。
我还以为大家都忘记了正常的下班时间（当然我总是忘记正常的上班时间），
这次竟然没有在下班时间之后再给我安排任务。&lt;/p&gt;

&lt;p&gt;我微微一笑。忍着头痛，踏上了回家的旅程。
头痛不负我，我坐了反方向的电车。结果还是快11点才到家。&lt;/p&gt;

&lt;p&gt;科技的博客好久没有更新。一方面是前阵子手术，没时间；一方面是，日式外包，也就是这副模样。
好多30-50岁的前辈们，留给家的任务就是窝着床，睡觉。
按照他们上班的时间来算，他们回家之后的晚饭时间都很紧凑。
这个样子，也是一生。
这也是我最早不选择日本企业的原因——进了之后一定会外包出去，然后自己成为负责人。
好吧。虽然我依旧是在日本。&lt;/p&gt;

&lt;p&gt;开了这个个人站点之后就不敢这样子的吐槽了。总怕被抓包。
不过我发现，一旦限制了我的嘴，我竟然就什么也写不出来了。
那就这样好了。只要不影响我的正常生活。我就依旧如同在lofter一样吐槽就好了。
那就这样好了。&lt;/p&gt;

&lt;p&gt;记于2017 Nov.22 于东京&lt;/p&gt;</content><author><name></name></author><category term="essay" /><summary type="html">哇。写到一半。在notepad++上写到一半然后电脑就崩溃了。吓得我和我的小伙伴们都惊呆了。 竟然连备份都没有。 没办法，这个五年多的电脑变得越来越不安定。 可能是我之前安装cpu风扇的时候，那个散热的胶让我不小心涂在了边缘。 可能是我之前拆cpu的时候，不小心撞坏了顶针。 总之我也不知道是什么样的鬼原因吧。我是想换一台电脑了–起码换个cpu。 但是鉴于同等配置的笔记本的高昂价格。我决定依旧台式。 今天7点就下班了。竟然只加班了半个小时。我也觉得挺不可思议的。 我还以为大家都忘记了正常的下班时间（当然我总是忘记正常的上班时间）， 这次竟然没有在下班时间之后再给我安排任务。 我微微一笑。忍着头痛，踏上了回家的旅程。 头痛不负我，我坐了反方向的电车。结果还是快11点才到家。 科技的博客好久没有更新。一方面是前阵子手术，没时间；一方面是，日式外包，也就是这副模样。 好多30-50岁的前辈们，留给家的任务就是窝着床，睡觉。 按照他们上班的时间来算，他们回家之后的晚饭时间都很紧凑。 这个样子，也是一生。 这也是我最早不选择日本企业的原因——进了之后一定会外包出去，然后自己成为负责人。 好吧。虽然我依旧是在日本。 开了这个个人站点之后就不敢这样子的吐槽了。总怕被抓包。 不过我发现，一旦限制了我的嘴，我竟然就什么也写不出来了。 那就这样好了。只要不影响我的正常生活。我就依旧如同在lofter一样吐槽就好了。 那就这样好了。 记于2017 Nov.22 于东京</summary></entry><entry><title type="html">lofter迁移许久</title><link href="http://localhost:4000/blog/_site/essay_blog/essay/2017/11/20/about-here.html" rel="alternate" type="text/html" title="lofter迁移许久" /><published>2017-11-20T00:00:00+09:00</published><updated>2017-11-20T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/essay_blog/essay/2017/11/20/about-here</id><content type="html" xml:base="http://localhost:4000/blog/_site/essay_blog/essay/2017/11/20/about-here.html">&lt;p&gt;从lofter迁移到这里。
却这么久都不更新文字。
可以推脱说，是生活不安定。心情跌落到了谷底。
毕竟，我连手写的日记都已经好久没有再写过了。
但是我不得不承认一个事实，就是。
很显然我这个日志的更新机制做的还不行。&lt;/p&gt;

&lt;p&gt;做了个小template。以后再写一个batch。把一股脑的动作都自动做了。
这样节约了麻烦，应该也就会更新的勤奋一些了吧（大概）。&lt;/p&gt;

&lt;p&gt;毕业有一阵子了。
对日本这个多重外包也有新的认识。
碰到一个做了快20年的前辈。下班了我要走。
他反问我。你回家这么早做什么呀。
然后他默默加班了2个小时。虽然没有什么任务。&lt;/p&gt;

&lt;p&gt;想起了知乎上的好多好多的言论。
懒得去辩解什么。反正，也正好到了该撤退的时候了，不是么。
做什么，都不要忘记了初心，不是么。&lt;/p&gt;

&lt;p&gt;研究室在举办OBOG会。同学找到我。我回说很想去啊。
然后我就没了下文。
我是真的很想回去。虽然里面没有国人。但是跟这几个人很想见一见，叙叙旧，讲讲今。
但是我现在的生活真的很不安定。我一开始就打算的回国。谁能想到会拖得这么久。
生活这东西你真的很难去判断去说什么。&lt;/p&gt;

&lt;p&gt;他就这么的来。&lt;/p&gt;

&lt;p&gt;他就这么的走。&lt;/p&gt;</content><author><name></name></author><category term="essay" /><category term="essay" /><summary type="html">从lofter迁移到这里。 却这么久都不更新文字。 可以推脱说，是生活不安定。心情跌落到了谷底。 毕竟，我连手写的日记都已经好久没有再写过了。 但是我不得不承认一个事实，就是。 很显然我这个日志的更新机制做的还不行。 做了个小template。以后再写一个batch。把一股脑的动作都自动做了。 这样节约了麻烦，应该也就会更新的勤奋一些了吧（大概）。 毕业有一阵子了。 对日本这个多重外包也有新的认识。 碰到一个做了快20年的前辈。下班了我要走。 他反问我。你回家这么早做什么呀。 然后他默默加班了2个小时。虽然没有什么任务。 想起了知乎上的好多好多的言论。 懒得去辩解什么。反正，也正好到了该撤退的时候了，不是么。 做什么，都不要忘记了初心，不是么。 研究室在举办OBOG会。同学找到我。我回说很想去啊。 然后我就没了下文。 我是真的很想回去。虽然里面没有国人。但是跟这几个人很想见一见，叙叙旧，讲讲今。 但是我现在的生活真的很不安定。我一开始就打算的回国。谁能想到会拖得这么久。 生活这东西你真的很难去判断去说什么。 他就这么的来。 他就这么的走。</summary></entry><entry><title type="html">他要的是爱</title><link href="http://localhost:4000/blog/_site/essay_blog/essay/2017/10/25/essay.html" rel="alternate" type="text/html" title="他要的是爱" /><published>2017-10-25T00:00:00+09:00</published><updated>2017-10-25T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/essay_blog/essay/2017/10/25/essay</id><content type="html" xml:base="http://localhost:4000/blog/_site/essay_blog/essay/2017/10/25/essay.html">&lt;p&gt;翻看自己2012年5月写的日记
上面抄写着TLC姐的签名：“他要的是爱，不是你的救赎。”&lt;/p&gt;

&lt;p&gt;也许是说我的吧。
毕竟那时候我还很瘦。也不算胖。还有着耍帅的资本。&lt;/p&gt;

&lt;p&gt;时过了这么久，5、6年有余了。
我想回应她说，&lt;/p&gt;

&lt;p&gt;“其实，
爱就是救赎。”&lt;/p&gt;</content><author><name></name></author><category term="essay" /><category term="access," /><category term="sql" /><summary type="html">翻看自己2012年5月写的日记 上面抄写着TLC姐的签名：“他要的是爱，不是你的救赎。” 也许是说我的吧。 毕竟那时候我还很瘦。也不算胖。还有着耍帅的资本。 时过了这么久，5、6年有余了。 我想回应她说， “其实， 爱就是救赎。”</summary></entry><entry><title type="html">关于ACCESS的null的一个小问题</title><link href="http://localhost:4000/blog/_site/tech_blog/tech/2017/08/30/access.html" rel="alternate" type="text/html" title="关于ACCESS的null的一个小问题" /><published>2017-08-30T00:00:00+09:00</published><updated>2017-08-30T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/tech_blog/tech/2017/08/30/access</id><content type="html" xml:base="http://localhost:4000/blog/_site/tech_blog/tech/2017/08/30/access.html">&lt;p&gt;近来在用MS的ACCESS这个小型数据库来做一些抽取数据，以及验证数据的东西。
ACCESS可谓是麻雀虽小，五脏俱全的终极典型。
总会在你想不到的地方使用简单的鼠标点点点来完成一个又一个操作。
虽然还不大会怎么从外部的api调用access（对于现在的我也没有必要），
做着一个又一个小query还挺来瘾的——虽然这么说吧，我更喜欢编程。&lt;/p&gt;

&lt;p&gt;在传统的这种SQL式的database之中，关于null的设定就如同schema的设定一样，
在不同的软件中有着不同的设定。譬如在这篇日文&lt;a href=&quot;https://www.ashisuto.co.jp/corporate/column/technical-column/detail/1197236_2274.html&quot;&gt;博文&lt;/a&gt;中有总结，oracle的话会把NULL和长度为0的文字（也就是空文字）作为同等的东西去处理。
但是mysql就会把他俩当成不一样的东西处理。
提到schema就不得不提一嘴，我到现在也没弄明白它的具体定义，
好吧，我觉得以后有时间有兴趣的话读一读oracle的文档。&lt;/p&gt;

&lt;p&gt;那么在ACCESS中是如何处理的。这里有份&lt;a href=&quot;https://support.microsoft.com/ja-jp/help/883247&quot;&gt;微软的日文文档&lt;/a&gt;。
里面详细的讲到在ACCESS中，null和空文字是两个概念。不过用Is Null和Not Like “*“，抽出的结果是相同的。
也就是虽然是2个概念，但是可以用同样的statement来抽出。&lt;/p&gt;

&lt;p&gt;这里总结一下定义的不同。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;null属于空文字or数值不确定的数值。&lt;/li&gt;
  &lt;li&gt;空文字只是空文字而已。可以用这个来输入“”。有的table不支持输入“”。那你就改table的设定，强行输入空文字。&lt;/li&gt;
  &lt;li&gt;根据table的设定不同，你可以用enter等来输入空文字，也可以不支持输入空文字。&lt;/li&gt;
  &lt;li&gt;用Like “*“的话，可以抽出空文字&lt;/li&gt;
  &lt;li&gt;用Not Like “*“的话，不可以抽出空文字，只能抽出null&lt;/li&gt;
  &lt;li&gt;用is Null 的话，不可以抽出空文字，只能抽出null&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;好吧。这篇文章介绍怎么更改设定，然后输入空文字。有一个很详尽的表格介绍。&lt;/p&gt;

&lt;p&gt;我来讲讲的我遇到的问题。
从外部的sql系列的数据库抽数据。
然后有一行的record，是空数据。
然而我们需要进行外部结合，把这个数据表格，和我们已有的数据表格比较。
然后把重复的去掉，把我们已有数据表格里面不重复的留下。&lt;/p&gt;

&lt;p&gt;好吧，我想说，空白数据的很烦（在不更改两个数据表格的前提下）。劳资先把空白数据都用select先去掉再说。
神奇的事情发生了。
我使用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;is not null and &amp;lt;&amp;gt; &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果愣是抽不出来。。。。&lt;/p&gt;

&lt;p&gt;后来还是我的大叔给出了解决方案。他边把思路说给我听，我边写着代码。
先进行值的判断，看是不是null。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iif( IsNull(A), &quot;&quot;, A)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在条件那里&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt; &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先把null的都转换，然后再跟空文字比较。
解决！&lt;/p&gt;

&lt;p&gt;厉害了我的大叔。我的天。&lt;/p&gt;

&lt;h3 id=&quot;事后反思&quot;&gt;事后反思：&lt;/h3&gt;
&lt;p&gt;当然仔细的想一想。is not null可以抽出空文字，不可以抽出null。
&amp;lt;&amp;gt;”” （大概）可以抽出null，不可以抽出空文字。&lt;/p&gt;

&lt;p&gt;那么也就是说，我们假设2个数据库表格中，分别存在null和空文字。
那么&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;抽出null的时候。
是用&amp;lt;&amp;gt;”“抽出来的，然后和不可以抽出null的is not null的AND条件发生激烈碰撞。
结果就是不符合条件抽不出来。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;抽出空文字的时候，同样是两个条件互相搏击打架，结果就是导致无法满足抽出条件——弄巧成拙。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大叔讲的话很简单。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;涉及到null就很烦啊，我也不知道具体是啥意思，
我就记得sql server的时候null的处理就很花心思。你用if文大概这么做一下吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;道理很简单，这东西可以用简单的方式绕开的话（而且不是很降低效率到不可以接受的程度的话），
那就绕开它。专心做逻辑。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E_(%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9)&quot;&gt;スキーマ_(データベース)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E12151_01/doc.150/e12155/oracle_mysql_compared.htm#i1026408&quot;&gt;Oracle and MySQL Compared:2.2.3.2 Column Default Value&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ashisuto.co.jp/corporate/column/technical-column/detail/1197236_2274.html&quot;&gt;SQLの観点から「Oracle Database」「PostgreSQL」「MySQL」の特徴を整理しよう！&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.microsoft.com/ja-jp/help/883247&quot;&gt;Access の Null 値と、長さ 0 の文字列の違いについて&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tech" /><category term="access," /><category term="sql" /><summary type="html">近来在用MS的ACCESS这个小型数据库来做一些抽取数据，以及验证数据的东西。 ACCESS可谓是麻雀虽小，五脏俱全的终极典型。 总会在你想不到的地方使用简单的鼠标点点点来完成一个又一个操作。 虽然还不大会怎么从外部的api调用access（对于现在的我也没有必要）， 做着一个又一个小query还挺来瘾的——虽然这么说吧，我更喜欢编程。 在传统的这种SQL式的database之中，关于null的设定就如同schema的设定一样， 在不同的软件中有着不同的设定。譬如在这篇日文博文中有总结，oracle的话会把NULL和长度为0的文字（也就是空文字）作为同等的东西去处理。 但是mysql就会把他俩当成不一样的东西处理。 提到schema就不得不提一嘴，我到现在也没弄明白它的具体定义， 好吧，我觉得以后有时间有兴趣的话读一读oracle的文档。 那么在ACCESS中是如何处理的。这里有份微软的日文文档。 里面详细的讲到在ACCESS中，null和空文字是两个概念。不过用Is Null和Not Like “*“，抽出的结果是相同的。 也就是虽然是2个概念，但是可以用同样的statement来抽出。 这里总结一下定义的不同。 null属于空文字or数值不确定的数值。 空文字只是空文字而已。可以用这个来输入“”。有的table不支持输入“”。那你就改table的设定，强行输入空文字。 根据table的设定不同，你可以用enter等来输入空文字，也可以不支持输入空文字。 用Like “*“的话，可以抽出空文字 用Not Like “*“的话，不可以抽出空文字，只能抽出null 用is Null 的话，不可以抽出空文字，只能抽出null 好吧。这篇文章介绍怎么更改设定，然后输入空文字。有一个很详尽的表格介绍。 我来讲讲的我遇到的问题。 从外部的sql系列的数据库抽数据。 然后有一行的record，是空数据。 然而我们需要进行外部结合，把这个数据表格，和我们已有的数据表格比较。 然后把重复的去掉，把我们已有数据表格里面不重复的留下。 好吧，我想说，空白数据的很烦（在不更改两个数据表格的前提下）。劳资先把空白数据都用select先去掉再说。 神奇的事情发生了。 我使用 is not null and &amp;lt;&amp;gt; &quot;&quot; 结果愣是抽不出来。。。。 后来还是我的大叔给出了解决方案。他边把思路说给我听，我边写着代码。 先进行值的判断，看是不是null。 iif( IsNull(A), &quot;&quot;, A) 然后在条件那里 &amp;lt;&amp;gt; &quot;&quot; 先把null的都转换，然后再跟空文字比较。 解决！ 厉害了我的大叔。我的天。 事后反思： 当然仔细的想一想。is not null可以抽出空文字，不可以抽出null。 &amp;lt;&amp;gt;”” （大概）可以抽出null，不可以抽出空文字。 那么也就是说，我们假设2个数据库表格中，分别存在null和空文字。 那么 抽出null的时候。 是用&amp;lt;&amp;gt;”“抽出来的，然后和不可以抽出null的is not null的AND条件发生激烈碰撞。 结果就是不符合条件抽不出来。 抽出空文字的时候，同样是两个条件互相搏击打架，结果就是导致无法满足抽出条件——弄巧成拙。 大叔讲的话很简单。 涉及到null就很烦啊，我也不知道具体是啥意思， 我就记得sql server的时候null的处理就很花心思。你用if文大概这么做一下吧。 道理很简单，这东西可以用简单的方式绕开的话（而且不是很降低效率到不可以接受的程度的话）， 那就绕开它。专心做逻辑。 参考资料： スキーマ_(データベース) Oracle and MySQL Compared:2.2.3.2 Column Default Value SQLの観点から「Oracle Database」「PostgreSQL」「MySQL」の特徴を整理しよう！ Access の Null 値と、長さ 0 の文字列の違いについて</summary></entry><entry><title type="html">记，升级到https的菜鸟旅程</title><link href="http://localhost:4000/blog/_site/tech_blog/tech/2017/08/20/abouthttps.html" rel="alternate" type="text/html" title="记，升级到https的菜鸟旅程" /><published>2017-08-20T00:00:00+09:00</published><updated>2017-08-20T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/tech_blog/tech/2017/08/20/abouthttps</id><content type="html" xml:base="http://localhost:4000/blog/_site/tech_blog/tech/2017/08/20/abouthttps.html">&lt;p&gt;起因之一是看到月光博客的&lt;a href=&quot;https://weibo.com/1494759712/FizDQd6sQ&quot;&gt;微博&lt;/a&gt;，&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;据谷歌邮件通知，从2017年10月起，当用户在HTTP网页上的表单中输入文本时，Chrome（版本62）将显示一条“不安全”警告，并在所有无痕模式下的HTTP网页上显示这一警告，即使没有密码也会显示警告，解决方法是：迁移到https。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;恰巧同时期看到twitter上有人谈及&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;let’s encrypt&lt;/a&gt;。
本来还打算用aws的一些服务或者找一些别的CA去花钱挂一个证书，但是看到这个好像不错，就从文档读起。&lt;/p&gt;

&lt;p&gt;事实上文档写的很简单，大致就是&lt;a href=&quot;https://letsencrypt.org/getting-started/&quot;&gt;你要有一个cgi的环境&lt;/a&gt;，
然后我们用&lt;a href=&quot;https://certbot.eff.org/&quot;&gt;certbot&lt;/a&gt;就可以非常简单嗨皮的构建https环境。
很傻瓜。但是事实上如果用apache一类的，也不过是装个mod，然后把证书的path写上去，同样是傻瓜式的构筑，而且是很麻烦的那种傻瓜。
既然这样，倒不如用let’s encrypt这种看起来就很赞，而且目标和梦想都很伟大的project – &lt;a href=&quot;https://en.wikipedia.org/wiki/Let%27s_Encrypt#Overview&quot;&gt;要加密整个互联网，啊哈。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文档虽然简单，但是介绍了它的一些特性，比如支持什么样的算法（但是这里我找的不是很清楚，看的不太仔细，只是看到略提一笔）。
还说好像是60天就会一自动更新。而且还提供了譬如不使用sudo的一个certbot的fork。&lt;/p&gt;

&lt;p&gt;看起来这么赞，
就照着它的使用说明用吧！
虽然我原本是想使用最复杂的椭圆密码和椭圆验证。
但是秉着&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;先有一个，再要好的一个&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;的这样一个基本原则，我按照操作说明很简单的操作起来。
&lt;a href=&quot;https://certbot.eff.org/&quot;&gt;操作说明:https://certbot.eff.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可是结果大大出乎我的意料，明明应该很简单就可以构筑的东西为什么会来来回回的失败。
（我怀疑是我的参数设定错误所以一直更改原本网站的参数然后继续尝试）
失败到后来我竟然被let’s encrypt CA 禁止了一段时间去认证 – 失败的认证次数过多，相当于被“禁言”了几十分钟。&lt;/p&gt;

&lt;p&gt;我把mariaDB和mysql的残骸清除，把过去装的一个垃圾傻瓜邮箱伺服器系统的残骸找到清除，
（那个“开源”邮箱伺服器系统竟然不提供卸载功能，作者留言说，要想卸载，重装OS吧。简直是WTF，作者还是国人，丢。。。。）
到最后才发现根本原因，我的virtual host的设定导致他无法正确的打开443port。。。。。因为我设置是伺服器从本地（伺服器）出发只能走80通道。。。。。
（当初是多神经才这么设定，一定是设定错了。。。。当时考虑的可能是防御hacking？？？！我应该是把目的地和出发地设置反了）&lt;/p&gt;

&lt;p&gt;然后无奈的暂时取消掉virtual host，装成功了之后再一点点设置回来。
还好certbot还比较聪明（写的比较傻瓜）&lt;/p&gt;

&lt;p&gt;看，&lt;a href=&quot;http://candy-water.com&quot;&gt;candy-water.com&lt;/a&gt;，无论怎么走，都是从443通道了，真开心！&lt;/p&gt;

&lt;p&gt;参阅资料：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;let’s encrypt:&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;https://letsencrypt.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;certbot:&lt;a href=&quot;https://certbot.eff.org/&quot;&gt;https://certbot.eff.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;部分document:&lt;a href=&quot;https://certbot.eff.org/docs/&quot;&gt;https://certbot.eff.org/docs/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;劳资要加密全世界的宣言:&lt;a href=&quot;https://en.wikipedia.org/wiki/Let%27s_Encrypt#Overview&quot;&gt;https://en.wikipedia.org/wiki/Let%27s_Encrypt#Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tech" /><category term="rust," /><category term="os" /><summary type="html">起因之一是看到月光博客的微博， 据谷歌邮件通知，从2017年10月起，当用户在HTTP网页上的表单中输入文本时，Chrome（版本62）将显示一条“不安全”警告，并在所有无痕模式下的HTTP网页上显示这一警告，即使没有密码也会显示警告，解决方法是：迁移到https。 恰巧同时期看到twitter上有人谈及let’s encrypt。 本来还打算用aws的一些服务或者找一些别的CA去花钱挂一个证书，但是看到这个好像不错，就从文档读起。 事实上文档写的很简单，大致就是你要有一个cgi的环境， 然后我们用certbot就可以非常简单嗨皮的构建https环境。 很傻瓜。但是事实上如果用apache一类的，也不过是装个mod，然后把证书的path写上去，同样是傻瓜式的构筑，而且是很麻烦的那种傻瓜。 既然这样，倒不如用let’s encrypt这种看起来就很赞，而且目标和梦想都很伟大的project – 要加密整个互联网，啊哈。 文档虽然简单，但是介绍了它的一些特性，比如支持什么样的算法（但是这里我找的不是很清楚，看的不太仔细，只是看到略提一笔）。 还说好像是60天就会一自动更新。而且还提供了譬如不使用sudo的一个certbot的fork。 看起来这么赞， 就照着它的使用说明用吧！ 虽然我原本是想使用最复杂的椭圆密码和椭圆验证。 但是秉着 先有一个，再要好的一个 的这样一个基本原则，我按照操作说明很简单的操作起来。 操作说明:https://certbot.eff.org/ 可是结果大大出乎我的意料，明明应该很简单就可以构筑的东西为什么会来来回回的失败。 （我怀疑是我的参数设定错误所以一直更改原本网站的参数然后继续尝试） 失败到后来我竟然被let’s encrypt CA 禁止了一段时间去认证 – 失败的认证次数过多，相当于被“禁言”了几十分钟。 我把mariaDB和mysql的残骸清除，把过去装的一个垃圾傻瓜邮箱伺服器系统的残骸找到清除， （那个“开源”邮箱伺服器系统竟然不提供卸载功能，作者留言说，要想卸载，重装OS吧。简直是WTF，作者还是国人，丢。。。。） 到最后才发现根本原因，我的virtual host的设定导致他无法正确的打开443port。。。。。因为我设置是伺服器从本地（伺服器）出发只能走80通道。。。。。 （当初是多神经才这么设定，一定是设定错了。。。。当时考虑的可能是防御hacking？？？！我应该是把目的地和出发地设置反了） 然后无奈的暂时取消掉virtual host，装成功了之后再一点点设置回来。 还好certbot还比较聪明（写的比较傻瓜） 看，candy-water.com，无论怎么走，都是从443通道了，真开心！ 参阅资料： let’s encrypt:https://letsencrypt.org/ certbot:https://certbot.eff.org/ 部分document:https://certbot.eff.org/docs/ 劳资要加密全世界的宣言:https://en.wikipedia.org/wiki/Let%27s_Encrypt#Overview</summary></entry><entry><title type="html">关于rust的初步学习笔记(1)-heap和stack的基本概念</title><link href="http://localhost:4000/blog/_site/tech_blog/tech/2017/08/20/about-rust-1.html" rel="alternate" type="text/html" title="关于rust的初步学习笔记(1)-heap和stack的基本概念" /><published>2017-08-20T00:00:00+09:00</published><updated>2017-08-20T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/tech_blog/tech/2017/08/20/about-rust-1</id><content type="html" xml:base="http://localhost:4000/blog/_site/tech_blog/tech/2017/08/20/about-rust-1.html">&lt;p&gt;因为个人对java并没有什么热爱，
（然而我的c++书籍的阅读却没有我小说的阅读进度快…)
加之近来身体不佳。
关于java同期的探索暂且告一段落———反正这个知识早晚会再次用到。（那时再来探索吧）
虽然我应该近期会优先探索非同期的部分——nodejs的部分。&lt;/p&gt;

&lt;h2 id=&quot;关于rust&quot;&gt;关于rust&lt;/h2&gt;
&lt;p&gt;缘由是在知乎上偶然看到这个东西。我错把这个东西当成的c++的一个衍生物品。以为是类似于RAII一类的东西。
事实上随手查阅这个东西的时候，才发现是一门语言。
而且是Mozilla主导开发的。一下子好感度大增，撇下只是看维基百科没有看的太明白的RAII，读起了rust的document。&lt;/p&gt;

&lt;p&gt;rust的document很完备。
我这里就权当一个读书笔记了。&lt;/p&gt;

&lt;h2 id=&quot;heap和stack&quot;&gt;heap和stack&lt;/h2&gt;

&lt;h3 id=&quot;为什么讨论heap和stack&quot;&gt;为什么讨论heap和stack？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;rust的文档中提到了他俩&lt;/li&gt;
  &lt;li&gt;事实上语言在内存中运用的时候，有时候会考虑到这两个数据结构。因为这是计算机内部的系统结构的一部分。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;基础概念&quot;&gt;基础概念&lt;/h3&gt;

&lt;p&gt;关于algorithm上heap和stack是怎么一个定义这里就不多赘述了。因为stack的结构简单，所以 理论上stack会比heap要快。
在acm中heap常会被用一个array来实装，而stack由于一般大多的stl都会提供实装，所以并不需要手动实装。&lt;/p&gt;

&lt;p&gt;这里需要说一个点就是，&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%83%92%E3%83%BC%E3%83%97&quot;&gt;日文维基百科&lt;/a&gt;中会说到heap的删除时间是O(log(n))。
这个给我绕住了。
因为我印象中，比如容纳{4, 5, 6}的一个heap的话，指定删除一个值6，事实上不可能是log(n)。
然后我看到了搜索一个值需要的时间是O(n)，我迷惑了，怎么搜索的时间会比删除的时间要长。
然后我意识到，容纳{4, 5, 6}的一个heap的话，删除一个值是说，删除一个指定index值的值。
相当于删除index是0 or 1 or 2 的一个值。这样的话删除时间的确是O(log(n))。&lt;/p&gt;

&lt;p&gt;(PS:英文和中文维基百科就讲的很清楚：“delete-max [or delete-min]”)&lt;/p&gt;

&lt;p&gt;绕开heap和stack这些繁复的algorithm的基础定义。
我们来看rust中是如何定义内存中heap和stack的使用的。&lt;/p&gt;

&lt;!--
&gt;For data with a size unknown to us at compile time or a size that might change, we can store data on the heap instead. The heap is less organized: when we put data on the heap, we ask for some amount of space. The operating system finds an empty spot somewhere in the heap that is big enough, marks it as being in use, and returns to us a pointer to that location. This process is called allocating on the heap, and sometimes we abbreviate the phrase as just “allocating.” Pushing values onto the stack is not considered allocating. Because the pointer is a known, fixed size, we can store the pointer on the stack, but when we want the actual data, we have to follow the pointer.
--&gt;
&lt;blockquote&gt;
  &lt;p&gt;The heap, on the other hand, is slower, and is explicitly allocated by your program. But it’s effectively unlimited in size, and is globally accessible.
– rust first-edition document 4.1. The Stack and the Heap&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Accessing data in the heap is slower than accessing data on the stack because we have to follow a pointer to get there. Contemporary processors are faster if they jump around less in memory.
When our code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function’s local variables get pushed onto the stack. When the function is over, those values get popped off the stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;– rust second-edition document 4.1. What is Ownership?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在内存中，stack是被你的rust确保的，而heap是被你写的程序所确保的。&lt;/li&gt;
  &lt;li&gt;确保空间大小的时候，stack是必须是固定大小。heap是pointer式的指向，所以不用固定大小。&lt;/li&gt;
  &lt;li&gt;heap往往是全局类的（global）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;关于stack&quot;&gt;关于stack&lt;/h3&gt;

&lt;p&gt;再详细的讲。
在呼叫一个函数（function）的时候。函数的一部分情报，以及函数内部的定义的局部变量，会被记忆到stack中。
这也是在acm中，使用递推（Recursion ）来解决一些问题的时候，由于呼叫自己的次数过多，导致内存不够用，
产生著名的stack over flow问题。（这里并不是在说同名问答论坛）&lt;/p&gt;

&lt;p&gt;这样的stack空间，在这个函数结束的时候，会被解放。
也就是说，哪怕你的这个函数内部定义了1GB大小的非pointer式指向的array，
但是是被线性呼叫的，而不是被同时呼叫。
那么在4GB的内存上理论上也是没有问题的。&lt;/p&gt;

&lt;h3 id=&quot;关于heap&quot;&gt;关于heap&lt;/h3&gt;

&lt;p&gt;也就是说，在函数内部呼叫例如&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;的一行的时候，这里使用的就是heap。&lt;/p&gt;

&lt;p&gt;使用heap的时候需要注意产生的一个问题就是，由于属于pointer指向，会产生这个内存领域没有被解放的问题。&lt;/p&gt;

&lt;p&gt;比如，函数内部呼叫上面的一行指令的时候，会在stack（根据rust的document）生成一个pointer，指向heap领域。
在函数结束的时候，这个pointer会跟着一起被毁灭。但是所指向的heap领域在有时候并不会被毁灭。
在c++中，大部分stl（可能是所有的？）在函数结束的时候都会自动运行destructor（如果我没有记错）。
来进行内存的解放。
然而过分的解除和确保heap领域可能会造成fragmentation问题
（？）（参见&lt;a href=&quot;https://www.uquest.co.jp/embedded/learning/lecture16.html&quot;&gt;ヒープとスタック&lt;/a&gt;
这里就已经是硬件方面的编程了，属于我不懂的领域）&lt;/p&gt;

&lt;p&gt;rust是如何处理这一问题的呢？&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;这里我有一个疑问，那么全局变量呢（global variables)呢？如果是array或者int的话？
是属于stack还是heap？
答案是在c中，这是使用了另一个叫做data segment的区域。（参见&lt;a href=&quot;http://www1.cts.ne.jp/~clab/hsample/Point/Point19.html&quot;&gt;関数や変数のメモリ配置&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;那么rust是如何处理这些繁复的内容的呢？
这些疑问留给下次吧，我累了= =&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第一版rust的document：&lt;a href=&quot;https://doc.rust-lang.org/book/first-edition/&quot;&gt;https://doc.rust-lang.org/book/first-edition/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;第二版rust的document：&lt;a href=&quot;https://doc.rust-lang.org/book/second-edition/&quot;&gt;https://doc.rust-lang.org/book/second-edition/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ヒープとスタック：&lt;a href=&quot;https://www.uquest.co.jp/embedded/learning/lecture16.html&quot;&gt;https://www.uquest.co.jp/embedded/learning/lecture16.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;関数や変数のメモリ配置：&lt;a href=&quot;http://www1.cts.ne.jp/~clab/hsample/Point/Point19.html&quot;&gt;http://www1.cts.ne.jp/~clab/hsample/Point/Point19.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tech" /><category term="rust," /><category term="os" /><summary type="html">因为个人对java并没有什么热爱， （然而我的c++书籍的阅读却没有我小说的阅读进度快…) 加之近来身体不佳。 关于java同期的探索暂且告一段落———反正这个知识早晚会再次用到。（那时再来探索吧） 虽然我应该近期会优先探索非同期的部分——nodejs的部分。 关于rust 缘由是在知乎上偶然看到这个东西。我错把这个东西当成的c++的一个衍生物品。以为是类似于RAII一类的东西。 事实上随手查阅这个东西的时候，才发现是一门语言。 而且是Mozilla主导开发的。一下子好感度大增，撇下只是看维基百科没有看的太明白的RAII，读起了rust的document。 rust的document很完备。 我这里就权当一个读书笔记了。 heap和stack 为什么讨论heap和stack？ rust的文档中提到了他俩 事实上语言在内存中运用的时候，有时候会考虑到这两个数据结构。因为这是计算机内部的系统结构的一部分。 基础概念 关于algorithm上heap和stack是怎么一个定义这里就不多赘述了。因为stack的结构简单，所以 理论上stack会比heap要快。 在acm中heap常会被用一个array来实装，而stack由于一般大多的stl都会提供实装，所以并不需要手动实装。 这里需要说一个点就是，日文维基百科中会说到heap的删除时间是O(log(n))。 这个给我绕住了。 因为我印象中，比如容纳{4, 5, 6}的一个heap的话，指定删除一个值6，事实上不可能是log(n)。 然后我看到了搜索一个值需要的时间是O(n)，我迷惑了，怎么搜索的时间会比删除的时间要长。 然后我意识到，容纳{4, 5, 6}的一个heap的话，删除一个值是说，删除一个指定index值的值。 相当于删除index是0 or 1 or 2 的一个值。这样的话删除时间的确是O(log(n))。 (PS:英文和中文维基百科就讲的很清楚：“delete-max [or delete-min]”) 绕开heap和stack这些繁复的algorithm的基础定义。 我们来看rust中是如何定义内存中heap和stack的使用的。 The heap, on the other hand, is slower, and is explicitly allocated by your program. But it’s effectively unlimited in size, and is globally accessible. – rust first-edition document 4.1. The Stack and the Heap Accessing data in the heap is slower than accessing data on the stack because we have to follow a pointer to get there. Contemporary processors are faster if they jump around less in memory. When our code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function’s local variables get pushed onto the stack. When the function is over, those values get popped off the stack. – rust second-edition document 4.1. What is Ownership? 也就是说， 在内存中，stack是被你的rust确保的，而heap是被你写的程序所确保的。 确保空间大小的时候，stack是必须是固定大小。heap是pointer式的指向，所以不用固定大小。 heap往往是全局类的（global）。 关于stack 再详细的讲。 在呼叫一个函数（function）的时候。函数的一部分情报，以及函数内部的定义的局部变量，会被记忆到stack中。 这也是在acm中，使用递推（Recursion ）来解决一些问题的时候，由于呼叫自己的次数过多，导致内存不够用， 产生著名的stack over flow问题。（这里并不是在说同名问答论坛） 这样的stack空间，在这个函数结束的时候，会被解放。 也就是说，哪怕你的这个函数内部定义了1GB大小的非pointer式指向的array， 但是是被线性呼叫的，而不是被同时呼叫。 那么在4GB的内存上理论上也是没有问题的。 关于heap 也就是说，在函数内部呼叫例如 std::set&amp;lt;int&amp;gt; a{1, 2, 3}; 的一行的时候，这里使用的就是heap。 使用heap的时候需要注意产生的一个问题就是，由于属于pointer指向，会产生这个内存领域没有被解放的问题。 比如，函数内部呼叫上面的一行指令的时候，会在stack（根据rust的document）生成一个pointer，指向heap领域。 在函数结束的时候，这个pointer会跟着一起被毁灭。但是所指向的heap领域在有时候并不会被毁灭。 在c++中，大部分stl（可能是所有的？）在函数结束的时候都会自动运行destructor（如果我没有记错）。 来进行内存的解放。 然而过分的解除和确保heap领域可能会造成fragmentation问题 （？）（参见ヒープとスタック 这里就已经是硬件方面的编程了，属于我不懂的领域） rust是如何处理这一问题的呢？ 结语 这里我有一个疑问，那么全局变量呢（global variables)呢？如果是array或者int的话？ 是属于stack还是heap？ 答案是在c中，这是使用了另一个叫做data segment的区域。（参见関数や変数のメモリ配置） 那么rust是如何处理这些繁复的内容的呢？ 这些疑问留给下次吧，我累了= = 参考资料： 第一版rust的document：https://doc.rust-lang.org/book/first-edition/ 第二版rust的document：https://doc.rust-lang.org/book/second-edition/ ヒープとスタック：https://www.uquest.co.jp/embedded/learning/lecture16.html 関数や変数のメモリ配置：http://www1.cts.ne.jp/~clab/hsample/Point/Point19.html</summary></entry><entry><title type="html">版权问题</title><link href="http://localhost:4000/blog/_site/essay_blog/essay/2017/08/07/credits.html" rel="alternate" type="text/html" title="版权问题" /><published>2017-08-07T00:00:00+09:00</published><updated>2017-08-07T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/essay_blog/essay/2017/08/07/credits</id><content type="html" xml:base="http://localhost:4000/blog/_site/essay_blog/essay/2017/08/07/credits.html">&lt;p&gt;在YouTube观看各种remix的视频的时候。
发现其中一个图片指向了一个网站。
&lt;a href=&quot;https://unsplash.com/&quot;&gt;https://unsplash.com/&lt;/a&gt;
一个免费提供该网站所有图片的，所有使用权限的网站。&lt;/p&gt;

&lt;p&gt;他的&lt;a href=&quot;https://unsplash.com/about&quot;&gt;介绍页面&lt;/a&gt;是这么写的。
&lt;strong&gt;do whatever you want&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;他的&lt;a href=&quot;https://unsplash.com/license&quot;&gt;版权页面&lt;/a&gt;是这么写的&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;You can use them for commercial and noncommercial purposes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;You do not need to ask permission from or provide credit to the photographer or Unsplash,
although it is appreciated when possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个版权的唯一限制是这样的&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;This license does not include the right to compile photos from Unsplash to replicate a similar or competing service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他不允许把图片放到同类的竞争网站上面。仅此而已。&lt;/p&gt;

&lt;p&gt;其实这个就属于支持remix文化以及创生新文化，还有抵触目前版权法的内容。&lt;/p&gt;

&lt;p&gt;相似的东西其实非常多。例如在法律框架下，保证自己的作品可以被任何人使用的权利，
人们创造了很多东西。譬如MIT license，譬如cc license。&lt;/p&gt;

&lt;p&gt;原因很简单。
版权法的创造是为了保护更好的创作。
保护以创作为生的人。
但正如没有绝对的善，也没有绝对的恶。
版权法确确实实在阻碍新文化的产生。
也就是说，他的过度保护在产生一个悖论。
那就是，他原本是为了保护更好的创作。
但是现在，因为有了它，没有办法去更好的创作。
好的，这里有一个逻辑的回路，就是这里是没有主语的。
有人可能会认为，这是保护一部分人在创作，但是另一部分人无法创作。
也许吧。
但是我认为，这里的主语是共通的。不是一部分人和另一部分人。
而是，一部分的创作是可以进行的，但另一部分创作没法进行。
主语应该是创作本身，而不是人。
古代欧洲曾经认为灵感来源于家中的小精灵，而不是人本身。
这是一个很有趣的观点——人不应该由于创作而被神化。&lt;/p&gt;

&lt;p&gt;近来国内的版权呼声高起。我也看到知乎上很多很多的人标注着，维权骑士云云。
这并不是个坏事情。但是对于知识流动的本身。这并不是一件值得推崇的事。
显然人们还没有注意到这一点。
迪士尼的版权可以把版权从56年延长到75年，可以把75年延长到95年。
我相信这也是一种的正义。
我可以选择这种正义。
我也可以选择把自己的作品不用这种正义。&lt;/p&gt;

&lt;p&gt;版权的问题很深。
近到同人类的作品，杂志。
总所周知，盗墓笔记，还有日系的一系列漫画，之所以风火的原因之一就是同人类作品的蜂拥。
这也是当今各大版权商纠结的一个地方，一方面想用法律，保护版权来赚钱；
一方面你过度保护了，万一这作品火不起来了怎么办。
有人会说，我不商业使用就不侵犯版权。不不不，各个地方的法律都不一样的。
譬如每年都在举办同人类的免费、无偿活动的日本。只要作者起诉，一样可以轻松获胜。
你只要公开，就有可能问责。
（在日本，之前还有过这种辩论。如若加入TPP，对于著作权，
即便作者不起诉，警察仍旧可以随意起诉，势必会破坏这种同人文化。
所以对于加入TPP的具体规则产生了大激辩。详见山田太郎和赤松健的一系列视频。)&lt;/p&gt;

&lt;p&gt;本来这篇文章我想说很多东西的。
我想赞颂这种无私的精神的。
版权法本身没有错，但是法律的一再改版使得版权法愈演愈烈。
但是我冷静下来，发现这也只是一种选择。
这是自由派的一种选择。
猫套上枷锁会得精神类疾病，
然而狗却依然活的很快活。
人类的社会性大概是基于两个之间吧，
有枷锁可以活，没枷锁也一样的活。
所以我发现这只是一种选择，
无论我怎么样的赞颂，也改变不了这只是一个无力的赞颂的事实。
lessig也有篇&lt;a href=&quot;https://www.ted.com/talks/lawrence_lessig_the_unstoppable_walk_to_political_reform&quot;&gt;演讲&lt;/a&gt;，
在讲述努力去改变。不只是著作权云云云云，很多方面都是一样。
我也一样。
如果国内真的在面临改变，不管是怎么样的。
我想去亲身经历。不是逃跑，总要有人要面对。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;unsplash的介绍页面：&lt;a href=&quot;https://unsplash.com/about&quot;&gt;https://unsplash.com/about&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;unsplash的版权页面：&lt;a href=&quot;https://unsplash.com/license&quot;&gt;https://unsplash.com/license&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;状告火锅店？为了维护著作权，迪士尼做的可远不止这些：&lt;a href=&quot;http://www.guokr.com/article/442338/&quot;&gt;http://www.guokr.com/article/442338/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;作者身后不寂寞：那些版权过期后的改编&lt;a href=&quot;https://www.15yan.com/story/dE2hbypOHdc/&quot;&gt;https://www.15yan.com/story/dE2hbypOHdc/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;lessig的ted演讲：&lt;a href=&quot;https://www.ted.com/talks/larry_lessig_says_the_law_is_strangling_creativity&quot;&gt;https://www.ted.com/talks/larry_lessig_says_the_law_is_strangling_creativity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
几年前看的我热血沸腾的lessig的ted演讲。
虽然他总统竞选失败了。但是可以看到很多关联的运动在不温不火的进行啊。
譬如这个网站：https://unsplash.com/    
对于下载的图片内容不设任何限制--类似于支持remix文化以及一系列产生新文化的概念。
虽然应该并不是符合万国法律的那种credit（具体在这里https://unsplash.com/about）。
如果想要万国法律适用的还是要用cc license或者MIT license。
--&gt;</content><author><name></name></author><category term="essay" /><summary type="html">在YouTube观看各种remix的视频的时候。 发现其中一个图片指向了一个网站。 https://unsplash.com/ 一个免费提供该网站所有图片的，所有使用权限的网站。 他的介绍页面是这么写的。 do whatever you want 他的版权页面是这么写的 You can use them for commercial and noncommercial purposes. You do not need to ask permission from or provide credit to the photographer or Unsplash, although it is appreciated when possible. 这个版权的唯一限制是这样的 This license does not include the right to compile photos from Unsplash to replicate a similar or competing service. 他不允许把图片放到同类的竞争网站上面。仅此而已。 其实这个就属于支持remix文化以及创生新文化，还有抵触目前版权法的内容。 相似的东西其实非常多。例如在法律框架下，保证自己的作品可以被任何人使用的权利， 人们创造了很多东西。譬如MIT license，譬如cc license。 原因很简单。 版权法的创造是为了保护更好的创作。 保护以创作为生的人。 但正如没有绝对的善，也没有绝对的恶。 版权法确确实实在阻碍新文化的产生。 也就是说，他的过度保护在产生一个悖论。 那就是，他原本是为了保护更好的创作。 但是现在，因为有了它，没有办法去更好的创作。 好的，这里有一个逻辑的回路，就是这里是没有主语的。 有人可能会认为，这是保护一部分人在创作，但是另一部分人无法创作。 也许吧。 但是我认为，这里的主语是共通的。不是一部分人和另一部分人。 而是，一部分的创作是可以进行的，但另一部分创作没法进行。 主语应该是创作本身，而不是人。 古代欧洲曾经认为灵感来源于家中的小精灵，而不是人本身。 这是一个很有趣的观点——人不应该由于创作而被神化。 近来国内的版权呼声高起。我也看到知乎上很多很多的人标注着，维权骑士云云。 这并不是个坏事情。但是对于知识流动的本身。这并不是一件值得推崇的事。 显然人们还没有注意到这一点。 迪士尼的版权可以把版权从56年延长到75年，可以把75年延长到95年。 我相信这也是一种的正义。 我可以选择这种正义。 我也可以选择把自己的作品不用这种正义。 版权的问题很深。 近到同人类的作品，杂志。 总所周知，盗墓笔记，还有日系的一系列漫画，之所以风火的原因之一就是同人类作品的蜂拥。 这也是当今各大版权商纠结的一个地方，一方面想用法律，保护版权来赚钱； 一方面你过度保护了，万一这作品火不起来了怎么办。 有人会说，我不商业使用就不侵犯版权。不不不，各个地方的法律都不一样的。 譬如每年都在举办同人类的免费、无偿活动的日本。只要作者起诉，一样可以轻松获胜。 你只要公开，就有可能问责。 （在日本，之前还有过这种辩论。如若加入TPP，对于著作权， 即便作者不起诉，警察仍旧可以随意起诉，势必会破坏这种同人文化。 所以对于加入TPP的具体规则产生了大激辩。详见山田太郎和赤松健的一系列视频。) 本来这篇文章我想说很多东西的。 我想赞颂这种无私的精神的。 版权法本身没有错，但是法律的一再改版使得版权法愈演愈烈。 但是我冷静下来，发现这也只是一种选择。 这是自由派的一种选择。 猫套上枷锁会得精神类疾病， 然而狗却依然活的很快活。 人类的社会性大概是基于两个之间吧， 有枷锁可以活，没枷锁也一样的活。 所以我发现这只是一种选择， 无论我怎么样的赞颂，也改变不了这只是一个无力的赞颂的事实。 lessig也有篇演讲， 在讲述努力去改变。不只是著作权云云云云，很多方面都是一样。 我也一样。 如果国内真的在面临改变，不管是怎么样的。 我想去亲身经历。不是逃跑，总要有人要面对。 参考资料： unsplash的介绍页面：https://unsplash.com/about unsplash的版权页面：https://unsplash.com/license 状告火锅店？为了维护著作权，迪士尼做的可远不止这些：http://www.guokr.com/article/442338/ 作者身后不寂寞：那些版权过期后的改编https://www.15yan.com/story/dE2hbypOHdc/ lessig的ted演讲：https://www.ted.com/talks/larry_lessig_says_the_law_is_strangling_creativity</summary></entry><entry><title type="html">夜</title><link href="http://localhost:4000/blog/_site/essay_blog/essay/2017/08/07/night.html" rel="alternate" type="text/html" title="夜" /><published>2017-08-07T00:00:00+09:00</published><updated>2017-08-07T00:00:00+09:00</updated><id>http://localhost:4000/blog/_site/essay_blog/essay/2017/08/07/night</id><content type="html" xml:base="http://localhost:4000/blog/_site/essay_blog/essay/2017/08/07/night.html">&lt;p&gt;在知乎的&lt;a href=&quot;https://www.zhihu.com/question/34599206/answer/71369947&quot;&gt;这里&lt;/a&gt;曾看过这么一段话&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;那天晚上我就回家了，我妈给我打了几千块钱，我把房租还了后留了一千给老邢，自己坐上了火车，老邢并没有感激我，反而用憎恨的眼光目送我离开。我能够理解他，如果在北京有什么比冰冷的现实更可怕的，那就只有孤独了。
那一刻，我是个逃兵，他是个被抛弃的伤兵。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这感觉其实是很多人不能也没法去理解的。
当我还在初中、高中就远走异国他乡去留学的时候，我回来讲这些感受。不仅是同龄的同学旧友们无法理解。高龄的长辈们也是同样。&lt;/p&gt;

&lt;p&gt;其实是很感谢网络。没有网络，是找不到有着这么多共鸣的人的。
曾在高中时候看过日本的一个游戏类网站的一个对话录。我猜另一个人应该是有名的ひろゆき吧，但我不确定，也可能是网络界、游戏界的某个人士。我实在是记不清了。
里面曾经这么提及网络。&lt;/p&gt;

&lt;p&gt;常常在网络上会看到很多人分享自己的故事。（在2ch这样的地方。）
有很多故事是很感人的。很多都是些很悲惨、被社会压得紧紧的人的故事。
这些都是我们在媒体上见不到的故事。
如果没有网络，那他们也许就这样就算了。
但是通过网络，事实上有很多跟他们有同样共鸣的人，生活很苦，为了吃饭而奔波的人会跟他们发出共鸣。
然而他们如果实在现实生活中的话也许永远都没办法遇到有共鸣的人。&lt;/p&gt;

&lt;p&gt;网络是片知识的海洋？不，它是一片信息的海洋。
有很多有共鸣的人，所以在那一刻我会觉得网络在拉近我。
网络在给我安全感。
我甚至不能没了手机。
因为手机甚至就代表着我和这个世界的联系——我起码还在和这个世界有着某种的联系。&lt;/p&gt;

&lt;p&gt;也许网络让人的&lt;a href=&quot;http://www.guokr.com/article/92734/&quot;&gt;更&lt;/a&gt;&lt;a href=&quot;http://www.guokr.com/article/91840/&quot;&gt;孤&lt;/a&gt;&lt;a href=&quot;https://www.ted.com/talks/sherry_turkle_alone_together&quot;&gt;独&lt;/a&gt;&lt;a href=&quot;http://www.guokr.com/article/77438/&quot;&gt;。&lt;/a&gt;
不过网络也在帮人解除心里的石&lt;a href=&quot;http://www.guokr.com/article/438754/&quot;&gt;。&lt;/a&gt;
网络并非无所不能。网络永远没法代替面对面的交流——关于只有网络交流的负面影响的研究可以告诉你网络的意想不到的负面。
但他同时也在给可以静下心来的人救赎。&lt;/p&gt;</content><author><name></name></author><category term="essay" /><summary type="html">在知乎的这里曾看过这么一段话 那天晚上我就回家了，我妈给我打了几千块钱，我把房租还了后留了一千给老邢，自己坐上了火车，老邢并没有感激我，反而用憎恨的眼光目送我离开。我能够理解他，如果在北京有什么比冰冷的现实更可怕的，那就只有孤独了。 那一刻，我是个逃兵，他是个被抛弃的伤兵。 这感觉其实是很多人不能也没法去理解的。 当我还在初中、高中就远走异国他乡去留学的时候，我回来讲这些感受。不仅是同龄的同学旧友们无法理解。高龄的长辈们也是同样。 其实是很感谢网络。没有网络，是找不到有着这么多共鸣的人的。 曾在高中时候看过日本的一个游戏类网站的一个对话录。我猜另一个人应该是有名的ひろゆき吧，但我不确定，也可能是网络界、游戏界的某个人士。我实在是记不清了。 里面曾经这么提及网络。 常常在网络上会看到很多人分享自己的故事。（在2ch这样的地方。） 有很多故事是很感人的。很多都是些很悲惨、被社会压得紧紧的人的故事。 这些都是我们在媒体上见不到的故事。 如果没有网络，那他们也许就这样就算了。 但是通过网络，事实上有很多跟他们有同样共鸣的人，生活很苦，为了吃饭而奔波的人会跟他们发出共鸣。 然而他们如果实在现实生活中的话也许永远都没办法遇到有共鸣的人。 网络是片知识的海洋？不，它是一片信息的海洋。 有很多有共鸣的人，所以在那一刻我会觉得网络在拉近我。 网络在给我安全感。 我甚至不能没了手机。 因为手机甚至就代表着我和这个世界的联系——我起码还在和这个世界有着某种的联系。 也许网络让人的更孤独。 不过网络也在帮人解除心里的石。 网络并非无所不能。网络永远没法代替面对面的交流——关于只有网络交流的负面影响的研究可以告诉你网络的意想不到的负面。 但他同时也在给可以静下心来的人救赎。</summary></entry></feed>